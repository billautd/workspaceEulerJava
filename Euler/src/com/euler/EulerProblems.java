package com.euler;

import java.util.ArrayList;
import java.util.List;

public class EulerProblems {
	/**
	 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we
	 * get 3, 5, 6 and 9. The sum of these multiples is 23.
	 * 
	 * Find the sum of all the multiples of 3 or 5 below 1000.
	 */
	public static long euler1() {
		final List<Long> multiples = new ArrayList<>();
		for (long i = 1; i < 1000; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				multiples.add(i);
			}
		}
		return Utils.listSum(multiples);
	}

	/**
	 * Each new term in the Fibonacci sequence is generated by adding the previous
	 * two terms. By starting with 1 and 2, the first 10 terms will be:
	 * 
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * 
	 * By considering the terms in the Fibonacci sequence whose values do not exceed
	 * four million, find the sum of the even-valued terms.
	 * 
	 */
	public static long euler2() {
		return Utils.evenListSum(Utils.fibonacci(4000000l));
	}

	/**
	 * 
	 * The prime factors of 13195 are 5, 7, 13 and 29.
	 * 
	 * What is the largest prime factor of the number 600851475143 ?
	 * 
	 */
	public static long euler3() {
		return Utils.listMax(Utils.primeFactors(600851475143l));
	}

	/**
	 * 
	 * 
	 * A palindromic number reads the same both ways. The largest palindrome made
	 * from the product of two 2-digit numbers is 9009 = 91 × 99.
	 * 
	 * Find the largest palindrome made from the product of two 3-digit numbers.
	 * 
	 * @return [i1, i2, product]
	 */
	public static List<Long> euler4() {
		long i1 = 1;
		long i2 = 1;
		long max = 1;
		for (long i = 1; i <= 999; i++) {
			for (long j = 1; j <= 999; j++) {
				final long nbrToCheck = i * j;
				if (Utils.isPalindrome(nbrToCheck) && nbrToCheck > max) {
					max = nbrToCheck;
					i1 = i;
					i2 = j;
				}
			}
		}
		return List.of(i1, i2, max);
	}

	/**
	 * 
	 * 2520 is the smallest number that can be divided by each of the numbers from 1
	 * to 10 without any remainder.
	 * 
	 * What is the smallest positive number that is evenly divisible by all of the
	 * numbers from 1 to 20?
	 * 
	 */
	public static long euler5() {
		long i = 2521;
		final List<Long> listToContain = List.of(11l, 12l, 13l, 14l, 15l, 16l, 17l, 18l, 19l, 20l);
		while (true) {
			final long value = i;
			if (!listToContain.stream().allMatch(val -> Utils.divides(value, val))) {
				i++;
			} else {
				break;
			}
		}
		return i;
	}

	/**
	 * The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... +
	 * 10^2 = 385
	 * 
	 * The square of the sum of the first ten natural numbers is, (1 + 2 + ... +
	 * 10)^2 = 55^2 = 3025
	 * 
	 * Hence the difference between the sum of the squares of the first ten natural
	 * numbers and the square of the sum is 3025 - 385 = 2640
	 * 
	 * Find the difference between the sum of the squares of the first one hundred
	 * natural numbers and the square of the sum.
	 */
	public static long euler6() {
		long squareOfSum = 0;
		long sumOfSquares = 0;
		for (long i = 1; i <= 100; i++) {
			squareOfSum += i;
		}
		squareOfSum *= squareOfSum;
		for (long i = 1; i <= 100; i++) {
			sumOfSquares += i * i;
		}
		return squareOfSum - sumOfSquares;
	}

	/**
	 * 
	 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
	 * that the 6th prime is 13.
	 * 
	 * What is the 10 001st prime number?
	 * 
	 */
	public static long euler7() {
		return Utils.getPrimes(10001).get(10001 - 1);
	}

	/**
	 *
	 * 
	 * 
	 * The four adjacent digits in the 1000-digit number that have the greatest
	 * product are 9 × 9 × 8 × 9 = 5832.
	 * 
	 * 73167176531330624919225119674426574742355349194934
	 * 96983520312774506326239578318016984801869478851843
	 * 85861560789112949495459501737958331952853208805511
	 * 12540698747158523863050715693290963295227443043557
	 * 66896648950445244523161731856403098711121722383113
	 * 62229893423380308135336276614282806444486645238749
	 * 30358907296290491560440772390713810515859307960866
	 * 70172427121883998797908792274921901699720888093776
	 * 65727333001053367881220235421809751254540594752243
	 * 52584907711670556013604839586446706324415722155397
	 * 53697817977846174064955149290862569321978468622482
	 * 83972241375657056057490261407972968652414535100474
	 * 82166370484403199890008895243450658541227588666881
	 * 16427171479924442928230863465674813919123162824586
	 * 17866458359124566529476545682848912883142607690042
	 * 24219022671055626321111109370544217506941658960408
	 * 07198403850962455444362981230987879927244284909188
	 * 84580156166097919133875499200524063689912560717606
	 * 05886116467109405077541002256983155200055935729725
	 * 71636269561882670428252483600823257530420752963450
	 * 
	 * Find the thirteen adjacent digits in the 1000-digit number that have the
	 * greatest product. What is the value of this product?
	 * 
	 */
	public static long euler8() {
		final String numberStr = "73167176531330624919225119674426574742355349194934"
				+ "96983520312774506326239578318016984801869478851843"
				+ "85861560789112949495459501737958331952853208805511"
				+ "12540698747158523863050715693290963295227443043557"
				+ "66896648950445244523161731856403098711121722383113"
				+ "62229893423380308135336276614282806444486645238749"
				+ "30358907296290491560440772390713810515859307960866"
				+ "70172427121883998797908792274921901699720888093776"
				+ "65727333001053367881220235421809751254540594752243"
				+ "52584907711670556013604839586446706324415722155397"
				+ "53697817977846174064955149290862569321978468622482"
				+ "83972241375657056057490261407972968652414535100474"
				+ "82166370484403199890008895243450658541227588666881"
				+ "16427171479924442928230863465674813919123162824586"
				+ "17866458359124566529476545682848912883142607690042"
				+ "24219022671055626321111109370544217506941658960408"
				+ "07198403850962455444362981230987879927244284909188"
				+ "84580156166097919133875499200524063689912560717606"
				+ "05886116467109405077541002256983155200055935729725"
				+ "71636269561882670428252483600823257530420752963450";
		final List<Short> digits = new ArrayList<>();
		// Parse string to short[][]
		for (int x = 0; x < numberStr.length(); x++) {
			digits.add(Short.parseShort(numberStr.substring(x, x + 1)));
		}
		long max = 0;
		for (int x = 0; x < digits.size() - 12; x++) {
			long product = 1;
			for (int i = 0; i < 13; i++) {
				product *= digits.get(i + x);
			}
			if (product > max) {
				max = product;
			}
		}

		return max;
	}

	/**
	 * 
	 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for
	 * which, a² + b² = c²
	 * 
	 * For example, 3² + 4² = 9 + 16 = 25 = 52.
	 * 
	 * There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find
	 * the product abc.
	 * 
	 */
	public static long euler9() {
		for (int a = 0; a <= 1000; a++) {
			for (int b = a + 1; b <= 1000; b++) {
				for (int c = b + 1; c <= 1000; c++) {
					if (a + b + c != 1000) {
						continue;
					}
					if (a * a + b * b == c * c) {
						System.out.println("Found for [a,b,c] = [" + a + "," + b + "," + c + "]");
						return a * b * c;
					}
				}
			}
		}
		return 0;
	}

	/**
	 *
	 * s * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
	 * 
	 * Find the sum of all the primes below two million.
	 * 
	 */
	public static long euler10() {
		return Utils.listSum(Utils.getPrimesSmallerThan(2000000));
	}
}
